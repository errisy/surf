//php include 'rpcdef' 'JobData' 
var JobServiceService;
(function (JobServiceService) {
    var Manager = (function () {
        function Manager() {
        }
        Manager.prototype.downloadChains = function (list) {
            var res = new Solubility.ChainResponse();
            res.missing = 0;
            res.total = count(list);
            for (var i = 0; i < res.total; i++) {
                var filename = 'psdb/' + list[i] + '.json';
                if (file_exists(filename)) {
                    var chain = json_decode(file_get_contents(filename));
                    array_push(res.chains, chain);
                }
                else {
                    res.missing += 1;
                }
            }
            return res;
        };
        Manager.prototype.reportStatus = function (jobID, status) {
            var job = this.loadJob(jobID);
            if (job) {
                job.updateStatus(status.structureID);
                this.saveJob(job.jobID, job);
                status.total = job.total;
                status.left = count(job.structures);
                status.numberOfClients = count(job.slaves);
            }
            return status;
        };
        Manager.prototype.finishJob = function (jobID, chain) {
            var structureID = chain.name;
            file_put_contents('psdb/' + structureID + '.json', json_encode(chain));
            var job = this.loadJob(jobID);
            var response = new Solubility.JobFinishResponse();
            var nextID = null;
            if (job) {
                nextID = job.finishStructure(structureID);
                response.result = structureID;
                response.total = job.total;
                response.left = count(job.structures);
                response.responseTime = time();
                response.numberOfClients = count(job.slaves);
                this.saveJob(jobID, job);
            }
            if (nextID) {
                response.nextStructureID = nextID;
            }
            else {
                if (response.left == 0) {
                    this.deleteJob(jobID);
                }
            }
            return response;
        };
        Manager.prototype.applyForJob = function (jobID) {
            var job = this.loadJob(jobID);
            var task = new Solubility.Task();
            if (job) {
                var nextID = job.getStructure();
                task.structureID = nextID;
                task.total = job.total;
                task.left = count(job.structures);
                task.numberOfClients = count(job.slaves);
                task.startTime = time();
                this.saveJob(jobID, job);
            }
            return task;
        };
        Manager.prototype.submitJob = function (job) {
            //check psdb
            var id = uniqid('psc');
            job.jobID = id;
            //structure in the format KEY_Chain.json;
            this.removeFinished(job);
            job.total = count(job.structures);
            this.saveJob(job.jobID, job);
            var status = new Solubility.JobStatus();
            status.jobID = id;
            status.total = count(job.structures);
            return status;
        };
        Manager.prototype.saveJob = function (jobID, job) {
            file_put_contents('task/' + jobID + '.json', json_encode(job));
        };
        Manager.prototype.loadJob = function (jobID) {
            if (!file_exists('task/' + jobID + '.json'))
                return null;
            var filecontent = file_get_contents('task/' + jobID + '.json');
            var job = json2object(json_decode(filecontent));
            this.removeFinished(job);
            return job;
        };
        Manager.prototype.removeFinished = function (job) {
            var ncStructures = array();
            for (var i = 0; i < count(job.structures); i++) {
                var strID = job.structures[i];
                if (!file_exists('psdb/' + strID + '.json')) {
                    array_push(ncStructures, strID);
                }
            }
            job.structures = ncStructures;
        };
        Manager.prototype.deleteJob = function (jobID) {
            if (!file_exists('task/' + jobID + '.json')) {
                return unlink('task/' + jobID + '.json');
            }
            return false;
        };
        return Manager;
    }());
    JobServiceService.Manager = Manager;
})(JobServiceService || (JobServiceService = {}));
//---AUTOGENERATED CODE BELOW: typescript dispatcher for php, please do not modify any code blow 
include('phputil.php');
var postInput = file_get_contents("php://input");
var jsonObject = json_decode(postInput);
switch (jsonObject.service) {
    case 'Manager':
        var JobService_Manager = new JobServiceService.Manager();
        switch (jsonObject.method) {
            case 'submitJob':
                var JobService_Manager_submitJob_parameter_0 = json2object(jsonObject.parameters[0]);
                var JobService_Manager_submitJobResult = JobService_Manager.submitJob(JobService_Manager_submitJob_parameter_0);
                echo(json_encode(JobService_Manager_submitJobResult));
                break;
            case 'applyForJob':
                var JobService_Manager_applyForJob_parameter_0 = jsonObject.parameters[0];
                var JobService_Manager_applyForJobResult = JobService_Manager.applyForJob(JobService_Manager_applyForJob_parameter_0);
                echo(json_encode(JobService_Manager_applyForJobResult));
                break;
            case 'reportStatus':
                var JobService_Manager_reportStatus_parameter_0 = jsonObject.parameters[0];
                var JobService_Manager_reportStatus_parameter_1 = json2object(jsonObject.parameters[1]);
                var JobService_Manager_reportStatusResult = JobService_Manager.reportStatus(JobService_Manager_reportStatus_parameter_0, JobService_Manager_reportStatus_parameter_1);
                echo(json_encode(JobService_Manager_reportStatusResult));
                break;
            case 'finishJob':
                var JobService_Manager_finishJob_parameter_0 = jsonObject.parameters[0];
                var JobService_Manager_finishJob_parameter_1 = json2object(jsonObject.parameters[1]);
                var JobService_Manager_finishJobResult = JobService_Manager.finishJob(JobService_Manager_finishJob_parameter_0, JobService_Manager_finishJob_parameter_1);
                echo(json_encode(JobService_Manager_finishJobResult));
                break;
            case 'downloadChains':
                var JobService_Manager_downloadChains_parameter_0 = jsonObject.parameters[0];
                var JobService_Manager_downloadChainsResult = JobService_Manager.downloadChains(JobService_Manager_downloadChains_parameter_0);
                echo(json_encode(JobService_Manager_downloadChainsResult));
                break;
        }
        break;
}
//# sourceMappingURL=JobService.js.map