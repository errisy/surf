

module viewmodel {
    export class ContentTemplate {
        key: string;
        path: string;
        type: string;
        url: string;
        template: string;
        jQuery: JQuery; 
    }
    export interface IContentScope extends ng.IScope {
        data: any;
        view: string; //the real view that should be compiled and presented in the content control.
        childscope: ng.IScope;//child scopes for view;
        controller: any; //user can specify the 
        modelbuilder: (data: any) => any; //a function that will create a viewmodel for a data;
        model: any; //the model generated by modelbuilder
        app: any; //the app, if the user wants to pass app to the content;
        templates: ContentTemplate[];//tempaltes that is used to save all templates;
        selector: (data: any, templates: ContentTemplate[]) => string;
        presentor: JQuery; //JQuery for the <div presentor></div>, it is used to present the template;
    }
    export interface IContentDirectiveScope extends ng.IScope {
        
    }
    export class ContentDirective extends ngstd.AngularDirective<IContentDirectiveScope>{
        constructor($compile: ng.ICompileService, $http: ng.IHttpService) {
            super();
            this.restrict = ngstd.DirectiveRestrict.E;
            this.link = (scope: IContentScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes) => {
                //this will remove all the templates in the content;
                element.children('template').each((index: number, elem: Element) => {
                    var $elem: JQuery = $(elem);
                    var template = new ContentTemplate();
                    template.key = $elem.attr('key');
                    template.path = $elem.attr('path');
                    template.type = $elem.attr('type');
                    template.url = $elem.attr('url');
                    template.jQuery = $elem;
                    if (template.url) {
                        //the embedded template is used for loading process;
                        template.template = $elem.html();
                        $http.get(template.url)
                            .success((data: string) => {
                                template.template = data;
                                //we must check if the return value can affect the view of the content control.
                                if (scope.selector) if (scope.view != scope.selector(scope.data, scope.templates)) {
                                    //if view is affected, view must be updated.
                                    scope.view = scope.selector(scope.data, scope.templates);
                                }
                            });
                    }
                    else {
                        template.template = $elem.html();
                    }
                    scope.templates.push(template);
                });

                element.children('template').remove();
                scope.presentor = element.find('div[presentor]');
                if (!scope.presentor) {
                    console.log('Fetal Error in Content Directive: No <div presentor></div> node was found. You must provide one <div presentor></div> in the Content Directive to present the data.');
                }
                scope.$watch('data', (newValue: any, oldValue: any) => {
                    if (scope.modelbuilder) {
                        scope.model = scope.modelbuilder(newValue);
                    }
                    if (scope.selector) {
                        var template: string = scope.selector(newValue, scope.templates);
                        if (template) scope.view = template;
                    }
                });
                scope.$watch('view', (newValue: string, oldValue: string) => {
                    //distroy all child elements in the element.
                    if (scope.childscope) {
                        scope.childscope.$destroy();//destroy the child scope
                        element.children().remove();//remove each of the child elments
                    }
                    //create a new child scope.
                    scope.childscope = scope.$new();
                    //append the complied element
                    if (scope.presentor) scope.presentor.append($compile(newValue)(scope.childscope));
                });;

            }
        }
    }
}

