<?php

namespace LogServiceService {
	class Debug
	{
		public function clear()
		{
			return file_put_contents('log.txt', '');
		}
		
		public function write($value)
		{
			return file_put_contents('log.txt', $value, FILE_APPEND);
		}
		
	}
}

namespace  {
	// to be used by remote procedure calls
	class rpc
	{
		public $service;
		
		public $method;
		
		public $parameters;
		
	}

	class FieldDef
	{
		public function __construct($_name, $_view, $_sqlBinding)
		{
			$this->name = $_name;
			$this->view = $_view;
			$this->sqlBinding = $_sqlBinding;
		}
		
		public $name;
		
		public $view;
		
		public $sqlBinding;
		
	}

	interface ITableDef
	{
		public function _Insert($port, $data);
		
		public function _Update($port, $data);
		
		public function _Fetch($port, $id);
		
		public function _Delete($port, $id);
		
		public function _New();
		
		public function _getKey($item);
		
		public function _setKey($item, $key);
		
	}

	class TableItem
	{
		public static function setRemoteReady($item)
		{
			$item->{'@@Remote'} = 'ready';
		}
		
		public static function isRemoteReady($item)
		{
			return $item->{'@@Remote'} == 'ready';
		}
		
		public static function setRemoteSynchronizing($item)
		{
			$item->{'@@Remote'} = 'synchronizing';
		}
		
		public static function isRemoteSynchronizing($item)
		{
			return $item->{'@@Remote'} == 'synchronizing';
		}
		
		public static function markType(ITableDef $def, $item)
		{
			$item->{'@@Table'} = $def->_TableName;
			$item->{'@@Schema'} = $def->_SchemaName;
		}
		
		public static function getStatus($item)
		{
			return $item->{'@@Status'};
		}
		
		public static function getTable($item)
		{
			return $item->{'@@Table'};
		}
		
		public static function getSchema($item)
		{
			return $item->{'@@Schema'};
		}
		
		public static function setStatus($item, $value)
		{
			$item->{'@@Status'} = $value;
		}
		
		public static function setNew($item)
		{
			$item->{'@@Status'} = 'new';
		}
		
		public static function setLoaded($item)
		{
			$item->{'@@Status'} = 'loaded';
		}
		
		public static function requiresUpdate($item)
		{
			if ($item->{'@@Remote'} != 'synchronizing' && ($item->{'@@Status'} == 'new' || $item->{'@@Status'} == 'to be deleted' || $item->{'@@Status'} == 'changed')) {
				$item->{'@@hashKey'} = $item->{'$$hashKey'};
				$item->{'@@Error'} = null;
				$item->{'@@Remote'} = 'synchronizing';
				return true;
			} else {
				return false;
			}
		}
		
		public static function hashKey($item)
		{
			return $item->{'$$hashKey'};
		}
		
		public static function setRemoteHashKey($item)
		{
			if ($item->{'$$hashKey'}) {
				$item->{'@@hashKey'} = $item->{'$$hashKey'};
				return true;
			} else {
				return false;
			}
		}
		
		public static function getRemoteHashKey($item)
		{
			return $item->{'@@hashKey'};
		}
		
		public static function setToBeDeleted($item)
		{
			$item->{'@@Status'} = 'to be deleted';
		}
		
		public static function isToBeDeleted($item)
		{
			return $item->{'@@Status'} == 'to be deleted';
		}
		
		public static function setChanged($item)
		{
			if ($item->{'@@Status'} == 'new' || $item->{'@@Status'} == 'to be deleted') {
			} else {
				$item->{'@@Status'} = 'changed';
			}
		}
		
		public static function setInserted($item)
		{
			$item->{'@@Status'} = 'inserted';
		}
		
		public static function isInserted($item)
		{
			return $item->{'@@Status'} == 'inserted';
		}
		
		public static function setUpdated($item)
		{
			$item->{'@@Status'} = 'updated';
		}
		
		public static function isUpdated($item)
		{
			return $item->{'@@Status'} == 'updated';
		}
		
		public static function isError($item)
		{
			return $item->{'@@Status'} == 'error';
		}
		
		public static function setDeleted($item)
		{
			$item->{'@@Status'} = 'deleted';
		}
		
		public static function clearError($item)
		{
			$item->{'@@Error'} = null;
		}
		
		public static function setError($item, $value)
		{
			$item->{'@@Status'} = 'error';
			$item->{'@@Error'} = $value;
		}
		
		public static function getError($item)
		{
			return $item->{'@@Error'};
		}
		
		public static function setBackChanged($item)
		{
			$item->{'@@Status'} = 'changed';
		}
		
		public static function isNew($item)
		{
			return $item->{'@@Status'} == 'new';
		}
		
		public static function isLoaded($item)
		{
			return $item->{'@@Status'} == 'loaded';
		}
		
		public static function isChanged($item)
		{
			return $item->{'@@Status'} == 'changed';
		}
		
		public static function isDeleted($item)
		{
			return $item->{'@@Status'} == 'deleted';
		}
		
	}

	//---AUTOGENERATED CODE BELOW: typescript dispatcher for php, please do not modify any code blow 
	include('phputil.php');
	$postInput = file_get_contents('php://input');
	$jsonObject = json_decode($postInput);
	switch ($jsonObject->service) {
		case 'Debug':
			$LogService_Debug = new \LogServiceService\Debug();
			switch ($jsonObject->method) {
				case 'clear':
					$LogService_Debug_clearResult = $LogService_Debug->clear();
					echo(json_encode($LogService_Debug_clearResult));
					break;
				case 'write':
					$LogService_Debug_write_parameter_0 = $jsonObject->parameters[0];
					$LogService_Debug_writeResult = $LogService_Debug->write($LogService_Debug_write_parameter_0);
					echo(json_encode($LogService_Debug_writeResult));
					break;
			}
			break;
	}
}
?>